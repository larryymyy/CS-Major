Loop Invariants
---------------
(1) State of Computation (boolean predicate) "snap shot"
	- Ex: <x = 0; y = 1>
	- Denoted by: <P> <Q>
		+ <P>: Before Loop
		+ <Q>: After Loop
(2) Program Statement (predicate transformers)
	- Ex: <P> S <Q>

Abstraction of a Loop:
	<P>
	while CONDITION [C] do:
		BODY [B]
	end while
	<Q>

Loop Invariant [I] is a **boolean predicate** that does not change during the execution of the loop.
Moreover:
	(1) <P> -> I
	(2) <I and C> B <I>
	(3) <I and ~C> -> <Q>


EXAMPLE
-------
Generate n-th Triangle Number

function f(n):
	s := 0
	k := 0
	while k < n + 1 do:
		s := s + k
		k := k + 1
	end while
	return s

~C: k = n + 1
========================================================================================================================
Proof
-----
(1) s = (k * (k - 1)) / 2
(2) Assume we are at i-th iteration (k = i)
	s, k = values before i-th loop
	^s, ^k = values after i-th loop
	^s = s + k = ((k * (k - 1)) / 2) + k = (k * (k + 1)) / 2
	^k = k + 1 => k = ^k - 1
(3) k = n + 1
