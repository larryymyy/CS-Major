dec -> bin -> hex
=================
0 -> 0000 -> 0x0
1 -> 0001 -> 0x1
2 -> 0010 -> 0x2
3 -> 0011 -> 0x3
4 -> 0100 -> 0x4
5 -> 0101 -> 0x5
6 -> 0110 -> 0x6
7 -> 0111 -> 0x7
8 -> 1000 -> 0x8
9 -> 1001 -> 0x9
10 -> 1010 -> 0xA
11 -> 1011 -> 0xB
12 -> 1100 -> 0xC
13 -> 1101 -> 0xD
14 -> 1110 -> 0xE
15 -> 1111 -> 0xF


unsigned -> two's complement
============================
~x + 1


unsigned -> dec
===============
x = 1010 1001
x = 2^7 + 2^5 + 2^3 + 2^0
x = 128 + 32 + 8 + 1
x = 169


two's complement -> dec
=======================
x = 1010 1001
x = -(2^7) + 2^5 + 2^3 + 2^0
x = -128 + 32 + 8 + 1
x = -87


Bitwise Operators
=================
& (AND):1 & 1 = 1
		1 & 0 = 0
		0 & 1 = 0
		0 & 0 = 0

| (OR): 1 | 1 = 1
		1 | 0 = 1
		0 | 1 = 1
		0 | 0 = 0

~ (NOT):~1 = 0
		~0 = 1

^ (XOR):1 ^ 1 = 0
		1 ^ 0 = 1
		0 ^ 1 = 1
		0 ^ 0 = 0
<<: 0b1 << 1 = 0b10
>> (Logical): 0b10 >> 1 = 0b1 [Unsigned]
>> (Arithmetic): 0b10101001 >> 1 = 0b11010100 [Signed]


Logial Operators
================
&& (AND): Both conditions must be true for expression to evaluate to true
|| (OR):  Either condition must be true for expression to evalutate to true


dec -> IEEE 754
===============
3.25
(1) Convert to binary decimal
	3.25 = 11.01
(2) Normalize
	11.01 -> 1.101
(3) Determine Exponent
	1.101 * (2^1) = 11.01
	Exponent = 1
(4) Add bias to exponent (Single-Point: 127)
	Exponent = 1 + 127 = 128
(5) Encode exponent as binary
	128 -> 1000 0000
(6) Determine sign bit
	3.25 is positive => sign = 0
	-3.25 is negatige => sign = 1
(7) Determine Mantissa
	Mantissa = Normalized binary decimal - 1 and drop Decimal point
	1.101 -> 101
(8) Pad Mantissa with Zeros in least significant portion (23 bits in total)
	101 -> 10100000000000000000000
(9) Build Binary Rep
	[sign exponent mantissa]
	[01000000010100000000000000000000]
(10) OPT: convert to hex (easier to read)
	0100 0000 0101 0000 0000 0000 0000 0000
	   4    0    5    0    0    0    0    0
	[0x40500000]


IEEE 754 -> dec
===============
0x40500000
(1) Convert to binary
	0x40500000 -> 0b01000000010100000000000000000000
(2) Separate sign, exponent, mantissa
	0 10000000 10100000000000000000000
(3) Determine sign
	0 => positive
	1 => negative
(4) Convert Exponent to Decimal and Subtract Bias (Single-Point: 127)
	10000000 -> 128 - 127 -> 1
(5) Add 1 to mantissa and multiply by (2 ^ exponent) [Decimal point in front of mantissa before adding]
	.101 + 1 => 1.101 * 2^1 => 11.01
(6) Convert to decimal (Before decimal, powers of two | After decimal, negative powers of two)
	11.01 => 3.25
(7) Apply sign
	3.25 * (-1) ^ [sign bit]
	=> [3.25]

Data Transfer Instructions
==========================
movq SRC, DEST   |   DEST = SRC
	- Overwrite destination with the value in source
	- Can be register -> %xxx
	  memory address -> (%xxx)
	  constant value -> $X
	- Cannot move memory address to memory address
		+ TWO movq instructions
		+ To do so:
			movq (%xxx), %xxx
			movq %xxx, (%xxx)
pushq SRC
	- Move value onto stack and update stack pointer
	- Complex instruction, made of other instructions
		+ movq SRC, (%rsp)
		+ subq 8(%rsp), %rsp
popq DEST
	- Move value off of stack and update stack pointer
	- Complex instruction, made of other instructions
		+ movq (%rsp), DEST
		+ addq 8(%rsp), %rsp

Arithmetic Instructions
=======================
addq SRC, DEST  |  DEST = DEST + SRC
shlq SRC, DEST  |  DEST = DEST << SRC
shrq SRC, DEST  |  DEST = DEST >> SRC (UNSIGNED)
sarq SRC, DEST  |  DEST = DEST >> SRC (SIGNED)
andq SRC, DEST  |  DEST = DEST & SRC
orq  SRC, DEST  |  DEST = DEST | SRC
xorq SRC, DEST  |  DEST = DEST ^ SRC

leaq SRC, DEST
	- Special Instruction
	- Syntax:
		+ offset(reg1, reg2, scalar)
	- Equation:
		+ DEST = reg2 * scalar + reg1 + offset


Control Instructions
====================
cmpq reg1, reg2
	- [reg2 - reg1]
	- Sets Processor Flags
	- To check if 0:
		+ cmpq $0, reg
j* LABEL
	- Jump based on conditional flag (set by all arithmetic instructions, testq, and cmpq)
	- i.e.
		+ cmpq $0, %rdi  # rdi - 0
		+ jne  .LABEL    # jump not equal to LABEL


Register Conventions
====================
%rdi = arg1
%rsi = arg2
%rax = return value

Arrays
======
- Sequential block of memory
- Most systems store row-first
- Take A = [[1,2,3],[4,5,6],[7,8,9]]
	+ Would be stored in memory as: 1,2,3,4,5,6,7,8,9
- To access, offset by first memory address + (number of elements * size of data)
	+ a[i][j] = &a[0][0] + (i * 3 * sizeof(int)) + (j * sizeof(int))
	+ a[i][j] = &a[0][0] + 12i + 4j
- Access using pointer arithmetic
	+ leaq instructions VERY useful in array access
- ONE-DIMENSIONAL Acces
	&a[0] + 4i
		+ 4, not 12, because our "rows" are effectively size 1
		+ another way is 4 * 1 * i
